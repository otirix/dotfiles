" vim settings
set scrolloff=5
set history=10000
set clipboard+=unnamedplus
set clipboard+=ideaput
set relativenumber
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" status bar
set showmode

" leader
let mapleader=" "

" find and replace
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
nnoremap <ESC> :noh<CR>


" register config
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap x "_x
nnoremap r "_r
xnoremap <leader>p "_dP

" yank
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+Y

" ideavim settings
set ideajoin
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray

" location
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)

" buffer (buffer < window < tab)
nmap <leader>xx <Action>(CloseContent)
nmap <leader>xa <Action>(CloseAllEditors)
nmap <leader>xo <Action>(CloseAllEditorsButActive)
nmap <leader>xp <Action>(CloseAllUnpinnedEditors)

" window
nmap <C-Tab> <Action>(PreviousTab)
nmap <Tab> <Action>(NextTab)
nmap <leader>p <Action>(PinActiveEditorTab)

nmap <leader>1 <Action>(GoToTab1)
nmap <leader>2 <Action>(GoToTab2)
nmap <leader>3 <Action>(GoToTab3)
nmap <leader>4 <Action>(GoToTab4)
nmap <leader>5 <Action>(GoToTab5)
nmap <leader>6 <Action>(GoToTab6)
nmap <leader>7 <Action>(GoToTab7)
nmap <leader>8 <Action>(GoToTab8)
nmap <leader>9 <Action>(GoToTab9)

" tab
map <leader>sh <Action>(MoveTabLeft)
map <leader>sj <Action>(MoveTabDown)
map <leader>sk <Action>(MoveTabUp)
map <leader>sl <Action>(MoveTabRight)
map <leader>sg <Action>(MoveEditorToOppositeTabGroup)
map <leader>sH <Action>(SplitHorizontally)
map <leader>sv <Action>(SplitVertically)

nmap <C-p> <Action>(JumpToLastWindow)
nmap <M-o> <Action>(PrevSplitter)
nmap <M-i> <Action>(NextSplitter)
nmap <C-k> <C-w>k
nmap <C-j> <C-w>j
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

nmap <leader>ww <Action>(HideAllWindows)
nmap <leader>wk <Action>(StretchSplitToTop)
nmap <leader>wj <Action>(StretchSplitToBottom)
nmap <leader>wh <Action>(StretchSplitToLeft)
nmap <leader>wl <Action>(StretchSplitToRight)
nmap <leader>wm <Action>(MaximizeEditorInSplit)
nmap <leader>wu <Action>(UnsplitAll)

" file
nmap <leader>of <Action>(OpenFile)
nmap <leader>yp <Action>(CopyAbsolutePath)
nmap <leader>rf <Action>(RecentFiles)
nmap <leader>rl <Action>(RecentLocations)
nmap <leader>rp <Action>(ManageRecentProjects)
nmap <leader>sf <Action>(ShowFilePath)
nmap <leader>si <Action>(SelectIn)
nmap <leader>fp <Action>(FindInPath)
nmap <leader>rp <Action>(ReplaceInPath)
nmap <leader>sw <Action>($SearchWeb)

" tag
nmap <leader>fu <Action>(FindUsages)
nmap <leader>fs <Action>(FileStructurePopup)
nmap <leader>su <Action>(ShowUsages)
nmap <leader>hl <Action>(HighlightUsagesInFile)
nmap <leader>qp <Action>(QuickPreview)
nmap <leader>qd <Action>(QuickDefinition)
nmap <leader>qD <Action>(QuickTypeDefinition)

" code
map gc <Action>(CommentByLineComment)
map gC <Action>(CommentByBlockComment)
nmap <leader>ca <Action>(ShowIntentionActions)
nmap <leader>se <Action>(ShowErrorDescription)
nmap <leader>om <Action>(OverrideMethods)
nmap <leader>im <Action>(ImplementMethods)
nmap <leader>cf <Action>(ReformatCode)
nmap <C-s> <Action>(ReformatCode)
nmap <leader>ic <Action>(InspectCode)
nmap <leader>so <Action>(SelectAllOccurrences)
nmap <leader>gcc <Action>(Generate)
nmap <leader>gt <Action>(GoToTest)

" run
nmap <leader>rc <Action>(ContextRun)
nmap <leader>rx<Action>(chooseRunConfiguration)
nmap <leader>rr <Action>(Rerun)
nmap <leader>rt <Action>(RunTests)
nmap <leader>rs <Action>(Stop)

" debug
"nmap <leader>dc <Action>(ContextDebug)
"nmap <leader>dx <Action>(Debug)
"nmap <leader>db <Action>(ToggleLineBreakpoint)
"nmap <leader>de <Action>(EditBreakpoint)
"nmap <leader>dv <Action>(ViewBreakpoints)

" build
nmap <leader>bb <Action>(BuildMenu)

" refactor
nmap <leader>rn <Action>(RenameElement)
nmap <leader>re <Action>(Refactorings.QuickListPopupAction)
nmap <leader>uw <Action>(Unwrap)
nmap <leader>sw <Action>(SurroundWith)
nmap <leader>sd <Action>(SafeDelete)
nmap <leader>cu <Action>(OptimizeImports)

" hierarchy
nmap <leader>hc <Action>(CallHierarchy)
nmap <leader>hm <Action>(MethodHierarchy)
nmap <leader>ht <Action>(TypeHierarchy)

" collapse
"nmap zz <Action>(ExpandCollapseToggleAction)
"nmap za <Action>(CollapseAllRegions)
"nmap zA <Action>(ExpandAllRegions)

" zen
nmap <leader>z <Action>(ToggleDistractionFreeMode)

" []
nmap [b <Action>(PreviousTab)
nmap ]b <Action>(NextTab)
nmap [d <Action>(GotoPreviousError)
nmap ]d <Action>(GotoNextError)
nmap [u <Action>(GotoPrevElementUnderCaretUsage)
nmap ]u <Action>(GotoNextElementUnderCaretUsage)
nmap [o <Action>(PreviousOccurence)
nmap ]o <Action>(NextOccurence)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
nmap [c <Action>(JumpToLastChange)
nmap ]c <Action>(JumpToNextChange)

" goto
nmap <leader>a <Action>(GotoAction)
nmap ga <Action>(GotoAction)
nmap <leader>gc <Action>(GotoClass)
nmap <leader><leader> <Action>(GotoFile)
nmap gs <Action>(GotoSymbol)
nmap gt <Action>(GoToTest)
nmap gT <Action>(TextSearchAction)
nmap go <Action>(GotoSuperMethod)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gI <Action>(QuickImplementations)
nmap gn <Action>(ShowNavBar)

" terminal
nmap <leader>tt <Action>(ActivateTerminalToolWindow)
nmap <leader>tc <Action>(Terminal.OpenInTerminal)

" bookmark
nmap mm <Action>(ToggleBookmark)
nmap ms <Action>(ShowBookmarks)

" todo
nmap <leader>to <Action>(ActivateTODOToolWindow)

" task
nmap <leader>ts <Action>(tasks.goto)

" idea join
nmap \\jl <Action>(EditorJoinLines)

" gist
nmap \\cg <Action>(Github.Create.Gist)

" highlight yank (bundle plugin)
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "200"
let g:highlightedyank_highlight_color = "rgba(57, 197, 187, 155)"

" commentary plugin
"Plug 'tpope/vim-commentary'

" translation (required idea plugin: Translation)
nmap \\tt <Action>($ShowTranslationDialogAction)
nmap \\ts <Action>($TranslateTextComponent)
nmap \\ti <Action>($InclusiveTranslateAction)
nmap \\te <Action>($ExclusiveTranslateAction)

" string manipulate (required idea plugin: String Manipulation)
nmap <leader>ss <Action>(osmedile.intellij.stringmanip.PopupChoiceAction)

" code screenshot (required idea plugin: Code Screenshots)
nmap <leader>cs <Action>(one.util.ideaplugin.screenshoter.CopyImageAction)

" which-key plugin
set which-key
set notimeout

" nerdtree plugin
set NERDTree
map <C-e> :NERDTreeToggle<CR>
map <leader>e :NERDTree<CR>

" alias
nmap <C-a> ggVG"+y
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" which-key descriptions 

" Register Config
let g:WhichKeyDesc_register_delete = "<Space>d  Delete without copying"
let g:WhichKeyDesc_register_visual_delete = "<Space>d  Delete selection without copying"
let g:WhichKeyDesc_register_x = "x  Delete character without copying"
let g:WhichKeyDesc_register_replace = "r  Replace character without copying"
let g:WhichKeyDesc_register_paste = "<Space>p  Paste in visual mode without overwriting register"

" Yank
let g:WhichKeyDesc_yank = "<Space>y  Yank to clipboard"
let g:WhichKeyDesc_yank_visual = "<Space>y  Yank selection to clipboard"
let g:WhichKeyDesc_yank_line = "<Space>Y  Yank line to clipboard"

" Location
let g:WhichKeyDesc_location_back = "<C-o>  Go back in location history"
let g:WhichKeyDesc_location_forward = "<C-i>  Go forward in location history"

" Buffer Management
let g:WhichKeyDesc_close_content = "<Space>xx  Close current editor"
let g:WhichKeyDesc_close_all_editors = "<Space>xa  Close all editors"
let g:WhichKeyDesc_close_except_active = "<Space>xo  Close all editors except active"
let g:WhichKeyDesc_close_unpinned_editors = "<Space>xp  Close all unpinned editors"

" Window Navigation
let g:WhichKeyDesc_previous_tab = "<C-Tab>  Switch to previous tab"
let g:WhichKeyDesc_next_tab = "<Tab>  Switch to next tab"
let g:WhichKeyDesc_pin_editor = "<Space>p  Pin active editor tab"
let g:WhichKeyDesc_goto_tab1 = "<Space>1  Go to tab 1"
let g:WhichKeyDesc_goto_tab2 = "<Space>2  Go to tab 2"
let g:WhichKeyDesc_goto_tab3 = "<Space>3  Go to tab 3"
let g:WhichKeyDesc_goto_tab4 = "<Space>4  Go to tab 4"
let g:WhichKeyDesc_goto_tab5 = "<Space>5  Go to tab 5"
let g:WhichKeyDesc_goto_tab6 = "<Space>6  Go to tab 6"
let g:WhichKeyDesc_goto_tab7 = "<Space>7  Go to tab 7"
let g:WhichKeyDesc_goto_tab8 = "<Space>8  Go to tab 8"
let g:WhichKeyDesc_goto_tab9 = "<Space>9  Go to tab 9"

" Tab Management
let g:WhichKeyDesc_move_tab_left = "<Space>sh  Move tab left"
let g:WhichKeyDesc_move_tab_down = "<Space>sj  Move tab down"
let g:WhichKeyDesc_move_tab_up = "<Space>sk  Move tab up"
let g:WhichKeyDesc_move_tab_right = "<Space>sl  Move tab right"
let g:WhichKeyDesc_move_editor_to_opposite_tab_group = "<Space>sg  Move editor to opposite tab group"
let g:WhichKeyDesc_split_horizontally = "<Space>sH  Split window horizontally"
let g:WhichKeyDesc_split_vertically = "<Space>sv  Split window vertically"

" Window Movement
let g:WhichKeyDesc_jump_last_window = "<C-p>  Jump to last window"
let g:WhichKeyDesc_prev_splitter = "<M-o>  Previous splitter"
let g:WhichKeyDesc_next_splitter = "<M-i>  Next splitter"
let g:WhichKeyDesc_move_up = "<C-k>  Move to the window above"
let g:WhichKeyDesc_move_down = "<C-j>  Move to the window below"
let g:WhichKeyDesc_move_left = "<C-h>  Move to the window on the left"
let g:WhichKeyDesc_move_right = "<C-l>  Move to the window on the right"

" Window Control
let g:WhichKeyDesc_hide_all_windows = "<Space>ww  Hide all windows"
let g:WhichKeyDesc_stretch_top = "<Space>wk  Stretch split to top"
let g:WhichKeyDesc_stretch_bottom = "<Space>wj  Stretch split to bottom"
let g:WhichKeyDesc_stretch_left = "<Space>wh  Stretch split to left"
let g:WhichKeyDesc_stretch_right = "<Space>wl  Stretch split to right"
let g:WhichKeyDesc_maximize_editor = "<Space>wm  Maximize editor in split"
let g:WhichKeyDesc_unsplit_all = "<Space>wu  Unsplit all windows"

" File Operations
let g:WhichKeyDesc_open_file = "<Space>of  Open file"
let g:WhichKeyDesc_copy_path = "<Space>yp  Copy file absolute path"
let g:WhichKeyDesc_recent_files = "<Space>rf  Show recent files"
let g:WhichKeyDesc_recent_locations = "<Space>rl  Show recent locations"
let g:WhichKeyDesc_manage_recent_projects = "<Space>rp  Manage recent projects"
let g:WhichKeyDesc_show_file_path = "<Space>sf  Show file path"
let g:WhichKeyDesc_select_in = "<Space>si  Select in..."
let g:WhichKeyDesc_find_in_path = "<Space>fp  Find in path"
let g:WhichKeyDesc_replace_in_path = "<Space>rp  Replace in path"
let g:WhichKeyDesc_search_web = "<Space>sw  Search the web"

" Tag Operations
let g:WhichKeyDesc_find_usages = "<Space>fu  Find usages"
let g:WhichKeyDesc_file_structure_popup = "<Space>fs  Show file structure popup"
let g:WhichKeyDesc_show_usages = "<Space>su  Show usages"
let g:WhichKeyDesc_highlight_usages = "<Space>hl  Highlight usages in file"
let g:WhichKeyDesc_quick_preview = "<Space>qp  Quick preview"
let g:WhichKeyDesc_quick_definition = "<Space>qd  Quick definition"
let g:WhichKeyDesc_quick_type_definition = "<Space>qD  Quick type definition"

" Code Actions
let g:WhichKeyDesc_comment_line = "gc  Comment by line"
let g:WhichKeyDesc_comment_block = "gC  Comment by block"
let g:WhichKeyDesc_show_intention = "<Space>ca  Show intention actions"
let g:WhichKeyDesc_show_error = "<Space>se  Show error description"
let g:WhichKeyDesc_override_methods = "<Space>om  Override methods"
let g:WhichKeyDesc_implement_methods = "<Space>im  Implement methods"
let g:WhichKeyDesc_reformat_code = "<Space>cf  Reformat code"
let g:WhichKeyDesc_inspect_code = "<Space>ic  Inspect code"
let g:WhichKeyDesc_select_all_occurrences = "<Space>so  Select all occurrences"
let g:WhichKeyDesc_generate_code = "<Space>gcc  Generate code"
let g:WhichKeyDesc_goto_test = "<Space>gt  Go to test"

" Run Actions
let g:WhichKeyDesc_context_run = "<Space>rc  Context run"
let g:WhichKeyDesc_choose_run_config = "<Space>rx  Choose run configuration"
let g:WhichKeyDesc_rerun = "<Space>rr  Rerun"
let g:WhichKeyDesc_run_tests = "<Space>rt  Run tests"
let g:WhichKeyDesc_stop = "<Space>rs  Stop"

" Build Actions
let g:WhichKeyDesc_build_menu = "<Space>bb  Open build menu"

" Refactor Actions
let g:WhichKeyDesc_rename_element = "<Space>rn  Rename element"
let g:WhichKeyDesc_quick_refactor = "<Space>re  Open quick refactorings list"
let g:WhichKeyDesc_unwrap = "<Space>uw  Unwrap"
let g:WhichKeyDesc_surround_with = "<Space>sw  Surround with"
let g:WhichKeyDesc_safe_delete = "<Space>sd  Safe delete"
let g:WhichKeyDesc_optimize_imports = "<Space>cu  Optimize imports"

" Hierarchy Actions
let g:WhichKeyDesc_call_hierarchy = "<Space>hc  Show call hierarchy"
let g:WhichKeyDesc_method_hierarchy = "<Space>hm  Sow method hierarchy"
let g:WhichKeyDesc_type_hierarchy = "<Space>ht  Show type hierarchy"

" Zen Mode
let g:WhichKeyDesc_toggle_distraction_free_mode = "<Space>z  Toggle distraction-free mode"

" Goto Actions

let g:WhichKeyDesc_goto_action = "<Space>a  Goto action"
let g:WhichKeyDesc_goto_class = "<Space>gc  Goto class"
let g:WhichKeyDesc_goto_file = "<Space><Space>  Goto file"
let g:WhichKeyDesc_goto_symbol = "gs  Goto symbol"
let g:WhichKeyDesc_goto_super_method = "go  Goto super method"
let g:WhichKeyDesc_goto_declaration = "gd  Goto declaration"
let g:WhichKeyDesc_goto_type_declaration = "gD  Goto type declaration"
let g:WhichKeyDesc_goto_test = "gt  Goto test"

" Miscellaneous
let g:WhichKeyDesc_toggle_distraction_free_mode = "<Space>df  Toggle distraction-free mode"

" handlers
sethandler <C-Tab> a:vim
sethandler <C-D> a:vim
sethandler <C-E> a:vim
sethandler <C-G> a:ide
sethandler <C-H> a:vim
sethandler <C-I> a:vim
sethandler <C-J> a:ide
sethandler <C-L> a:vim
sethandler <C-N> a:vim
sethandler <C-O> a:vim
sethandler <C-P> a:vim
sethandler <C-R> a:vim
sethandler <C-S> a:vim
sethandler <C-U> a:vim
sethandler <C-V> a:vim
sethandler <C-Y> a:ide
